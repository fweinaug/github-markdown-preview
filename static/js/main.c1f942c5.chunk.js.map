{"version":3,"sources":["components/Editor.js","components/Preview.js","App.js","serviceWorker.js","index.js"],"names":["Editor","props","className","onClick","navigator","clipboard","writeText","text","rows","spellCheck","onChange","textChange","value","placeholder","previewClick","Preview","dangerouslySetInnerHTML","__html","html","App","state","textChangeHandler","event","setState","target","previewClickHandler","a","octokit","Octokit","request","data","headers","response","this","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sUAiCeA,EA/BA,SAACC,GAKd,OACE,yBAAKC,UAAU,0CACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,uCACb,wBAAIA,UAAU,uCAAd,YAGA,4BAAQA,UAAU,MAAMC,QAXP,WACvBC,UAAUC,UAAUC,UAAUL,EAAMM,QAU9B,SAEF,yBAAKL,UAAU,YACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,mBACb,8BAAUA,UAAU,eAAeM,KAAM,GAAIC,YAAY,EAC/CC,SAAUT,EAAMU,WAAYC,MAAOX,EAAMM,KACzCM,YAAY,wDAG1B,yBAAKX,UAAU,gBACb,4BAAQA,UAAU,kBAAkBC,QAASF,EAAMa,cAAnD,gBCDGC,EAtBC,SAACd,GACf,OACE,yBAAKC,UAAU,0CACb,yBAAKA,UAAU,iDACb,yBAAKA,UAAU,4CACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,qFACb,wBAAIA,UAAU,kBAAd,cAIF,yBAAKA,UAAU,sBACb,6BAASA,UAAU,6BACVc,wBAAyB,CAACC,OAAQhB,EAAMiB,cC+BhDC,G,kNAvCbC,MAAQ,CACNb,KAAM,KACNW,KAAM,M,EAGRG,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZhB,KAAMe,EAAME,OAAOZ,S,EAIvBa,oB,sBAAsB,8BAAAC,EAAA,6DACdC,EAAU,IAAIC,IADA,SAGGD,EAAQE,QAAQ,qBAAsB,CAC3DC,KAAM,EAAKV,MAAMb,KACjBwB,QAAS,CACP,eAAgB,+BANA,OAGdC,EAHc,OAUpB,EAAKT,SAAS,CACZL,KAAMc,EAASF,OAXG,2C,uDAgBpB,OACE,yBAAK5B,UAAU,OACb,uBAAGA,UAAU,wCAAb,2BACA,kBAAC,EAAD,CAAQK,KAAM0B,KAAKb,MAAMb,KACjBI,WAAYsB,KAAKZ,kBAAkBa,KAAKD,MACxCnB,aAAcmB,KAAKR,oBAAoBS,KAAKD,QACnDA,KAAKb,MAAMF,KAAO,kBAAC,EAAD,CAASA,KAAMe,KAAKb,MAAMF,OAAW,U,GAlC9CiB,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBzC,WACrBA,UAAU0C,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c1f942c5.chunk.js","sourcesContent":["import React from 'react';\n\nconst Editor = (props) => {\n  const copyClickHandler = () => {\n    navigator.clipboard.writeText(props.text);\n  }\n\n  return (\n    <div className=\"container-lg px-3 px-md-4 px-lg-6 mt-4\">\n      <div className=\"Box Box--condensed\">\n        <div className=\"Box-header d-flex flex-items-center\">\n          <h3 className=\"Box-title overflow-hidden flex-auto\">\n            Markdown\n          </h3>\n          <button className=\"btn\" onClick={copyClickHandler}>Copy</button>\n        </div>\n        <div className=\"Box-body\">\n          <div className=\"form-group\">\n            <div className=\"form-group-body\">\n              <textarea className=\"form-control\" rows={35} spellCheck={false}\n                        onChange={props.textChange} value={props.text}\n                        placeholder=\"Enter some Markdown and click the Preview button.\" />\n            </div>\n          </div>\n          <div className=\"form-actions\">\n            <button className=\"btn btn-primary\" onClick={props.previewClick}>Preview</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Editor;\n","import React from 'react';\n\nconst Preview = (props) => {\n  return (\n    <div className=\"container-xl px-3 px-md-4 px-lg-6 my-4\">\n      <div className=\"gutter-condensed gutter-lg d-flex flex-md-row\">\n        <div className=\"flex-shrink-0 col-12 col-md-9 mx-md-auto\">\n          <div className=\"Box mt-4\">\n            <div className=\"Box-header d-flex flex-items-center flex-justify-between bg-white border-bottom-0\">\n              <h2 className=\"Box-title pr-3\">\n                README.md\n              </h2>\n            </div>\n            <div className=\"Box-body px-5 pb-5\">\n              <section className=\"markdown-body container-lg\"\n                       dangerouslySetInnerHTML={{__html: props.html}} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Preview;\n","import React, { Component } from 'react';\nimport { Octokit } from \"@octokit/core\";\nimport Editor from \"./components/Editor\";\nimport Preview from \"./components/Preview\";\nimport './App.scss';\n\nclass App extends Component {\n  state = {\n    text: null,\n    html: null\n  }\n\n  textChangeHandler = (event) => {\n    this.setState({\n      text: event.target.value,\n    });\n  }\n\n  previewClickHandler = async () => {\n    const octokit = new Octokit();\n\n    const response = await octokit.request('POST /markdown/raw', {\n      data: this.state.text,\n      headers: {\n        'content-type': 'text/plain; charset=utf-8'\n      }\n    });\n\n    this.setState({\n      html: response.data,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <p className=\"f2-light text-gray-light text-center\">GitHub Markdown Preview</p>\n        <Editor text={this.state.text}\n                textChange={this.textChangeHandler.bind(this)}\n                previewClick={this.previewClickHandler.bind(this)} />\n        {this.state.html ? <Preview html={this.state.html} /> : null}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}